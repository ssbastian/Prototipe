


# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions


# This is a simple example for a custom action which utters "Hello World!"

# from typing import Any, Text, Dict, List
#
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.events import SlotSet, FollowupAction, UserUtteranceReverted
from rasa_sdk.executor import CollectingDispatcher


#from actions.db import guardarUsuario



class ActionGuardarNombre(Action):

    def name(self) -> Text:
        return "action_guardar_nombre"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:


        nombre = tracker.get_slot("name")
        sender_id = tracker.sender_id  # <- este es el ID √∫nico del usuario
        
        if not nombre:
            dispatcher.utter_message(text="No entend√≠ tu nombre, ¬øpuedes repetirlo?")
            return []

        #guardarUsuario(sender_id, nombre)

        dispatcher.utter_message(text=f"Gracias, {nombre}, he guardado tu nombre.")
        return [
            SlotSet("name", nombre),
            SlotSet("usuario_nuevo", False)
        ]

 
class ActionPreguntarEmocion(Action):
    def name(self):
        return "action_preguntar_emocion"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict):
        # Definimos las opciones v√°lidas

        self.valid_choices = {
            "üòä Feliz": "feliz",
            "üòå Tranquilo": "tranquilo",
            "üòç Emocionado": "emocionado",
            "üò¢ Triste": "triste",
            "üòü Ansioso": "ansioso",
            "üò° Enojado": "enojado",
            "üòî Inseguro": "inseguro",
            "üò¥ Cansado": "cansado",
            "üòê Neutral": "neutral"
        }

        # Configuraci√≥n del teclado
        reply_markup = {
            "keyboard": [list(self.valid_choices.keys())[i:i+3] for i in range(0, len(self.valid_choices), 3)],
            "resize_keyboard": True,
            "one_time_keyboard": True,
            "input_field_placeholder": "‚ö†Ô∏è Usa solo los botones ‚¨áÔ∏è",
            "is_persistent": True
        }
        # Mensaje inicial
        message = {
            "text": "¬øC√≥mo te sientes hoy?",
            "reply_markup": reply_markup,
            "parse_mode": "Markdown"
        }
        dispatcher.utter_message(json_message=message)
        
        return []
    
    
class ActionReaccionarEmocion(Action):
    def name(self) -> str:
        return "action_reaccionar_emocion"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        emocion_registrada = tracker.get_slot("emocion_registrada")
        emocion = tracker.get_slot("emocion")
        print(f"Emoci√≥n detectada: {emocion}")
        # if emocion_registrada:
        #     dispatcher.utter_message(text="Ya registr√© c√≥mo te sientes üòä. Gracias.")
        #     return []
        if not emocion:
            dispatcher.utter_message(text="No he detectado ninguna emoci√≥n. Por favor, usa los botones para expresar c√≥mo te sientes.")
            return []
        # Reaccionar seg√∫n la emoci√≥n
        if emocion == "feliz":
            dispatcher.utter_message(text="¬°Qu√© alegr√≠a saber que est√°s feliz! üòÑ Me encanta escucharlo.")
        elif emocion == "tranquilo":
            dispatcher.utter_message(text="Qu√© bueno que te sientas tranquilo. Disfruta de ese momento de calma. üåø")
        elif emocion == "emocionado":
            dispatcher.utter_message(text="¬°Eso suena emocionante! Cu√©ntame m√°s sobre lo que te tiene as√≠. üéâ")
        elif emocion == "triste":
            dispatcher.utter_message(text="Lamento que est√©s triste. Si quieres, podemos hablar de lo que te preocupa. üíô")
        elif emocion == "ansioso":
            dispatcher.utter_message(text="Entiendo que te sientas ansioso. Respira profundo, aqu√≠ estoy para acompa√±arte. üå∏")
        elif emocion == "enojado":
            dispatcher.utter_message(text="Entiendo que est√©s enojado. Si quieres, podemos buscar una forma de canalizarlo. üò°")
        elif emocion == "inseguro":
            dispatcher.utter_message(text="Es normal sentirse inseguro a veces. Recuerda que puedes contar conmigo. ü§ù")
        elif emocion == "cansado":
            dispatcher.utter_message(text="Parece que necesitas un descanso. ¬øQuieres relajarte un rato? üò¥")
        elif emocion == "neutral":
            dispatcher.utter_message(text="Est√° bien sentirse neutral. Si quieres, podemos charlar para cambiar un poco el √°nimo. üôÇ")
        else:
            dispatcher.utter_message(text="Gracias por compartir c√≥mo te sientes. Estoy aqu√≠ para escucharte. üí¨")

        #dispatcher.utter_message(response="utter_opciones_post_emocion")

        # ‚úÖ Activar la bandera
        return [SlotSet("emocion_registrada", True)]



class ActionReaccionarEmocion2(Action):
    def name(self) -> str:
        return "action_reaccionar_emocion2"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        emocion = tracker.get_slot("emocion")
        respuesta = ""
        ayuda_recomendada = None

        negativas = ["triste", "ansioso", "enojado", "cansado", "inseguro"]
        positivas = ["feliz", "tranquilo", "emocionado", "neutral"]

        if not emocion:
            dispatcher.utter_message(text="No he detectado ninguna emoci√≥n. Por favor, usa los botones para expresar c√≥mo te sientes.")
            return []

        if emocion in negativas:
            # Emociones negativas
            ayuda_recomendada = "negativa"
            if emocion == "triste":
                respuesta = "Lamento que est√©s triste. Si quieres, podemos hablar de lo que te preocupa. üíô"
            elif emocion == "ansioso":
                respuesta = "Entiendo que te sientas ansioso. Respira profundo, aqu√≠ estoy para acompa√±arte. üå∏"
            elif emocion == "enojado":
                respuesta = "Entiendo que est√©s enojado. Si quieres, podemos buscar una forma de canalizarlo. üò°"
            elif emocion == "cansado":
                respuesta = "Parece que necesitas un descanso. ¬øQuieres relajarte un rato? üò¥"
            elif emocion == "inseguro":
                respuesta = "Es normal sentirse inseguro a veces. Recuerda que puedes contar conmigo. ü§ù"
        elif emocion in positivas:
            # Emociones positivas o neutras
            ayuda_recomendada = "positiva"
            if emocion == "feliz":
                respuesta = "¬°Qu√© alegr√≠a saber que est√°s feliz! üòÑ Me encanta escucharlo."
            elif emocion == "tranquilo":
                respuesta = "Qu√© bueno que te sientas tranquilo. Disfruta de ese momento de calma. üåø"
            elif emocion == "emocionado":
                respuesta = "¬°Eso suena emocionante! Cu√©ntame m√°s sobre lo que te tiene as√≠. üéâ"
            elif emocion == "neutral":
                respuesta = "Est√° bien sentirse neutral. Si quieres, podemos charlar para cambiar un poco el √°nimo. üôÇ"
            else:
                respuesta = "Gracias por compartir c√≥mo te sientes. Estoy aqu√≠ para escucharte. üí¨"

        dispatcher.utter_message(text=respuesta)
                # Preguntar si quiere ayuda, con botones
        dispatcher.utter_message(
            text="¬øQuieres que te recomiende algo para este momento?",
            buttons = [
                {"title": "S√≠, por favor", "payload": "afirmar_ayuda_emocion"},
                {"title": "No, gracias", "payload": "negar_ayuda_emocion"}
            ], button_type="inline" 
        )
        # return [
        #     SlotSet("ayuda_recomendada", ayuda_recomendada),
        #     FollowupAction("action_ofrecer_ayuda"),
        # ]
        return [SlotSet("ayuda_recomendada", ayuda_recomendada)]


import requests
import os

# Guarda tu token aqu√≠ o en una variable de entorno
TELEGRAM_TOKEN = "7109842657:AAGWrQwhcclhUG9fwLCdykK26RbsTSi4XhE"

class ActionOfrecerAyuda(Action):
    def name(self) -> str:
        return "action_ofrecer_ayuda"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        # 1Ô∏è‚É£ Enviar mensaje r√°pido directo a Telegram
        chat_id = tracker.sender_id
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": "Entendido ‚úÖ"}
        )

        tipo = tracker.get_slot("ayuda_recomendada")

        if tipo == "negativa":
            dispatcher.utter_message("Puedo recomendarte t√©cnicas de relajaci√≥n o ejercicios para sentirte mejor, ¬øte parece?")
        elif tipo == "positiva":
            dispatcher.utter_message("¬°Me alegra verte bien! Si quieres, puedo sugerirte actividades para mantener ese √°nimo. ‚ú®")
        else:
            dispatcher.utter_message("No tengo claro qu√© tipo de ayuda ofrecer, pero podemos hablar de lo que quieras. ü§ù")

        # return [UserUtteranceReverted()] #para que no se dispare la regla de baja confianza
        return []


class ActionEjercicioRespiracion(Action):
    def name(self) -> str:
        return "action_ejercicio_respiracion"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        # Paso 1: Introducci√≥n y primer paso
        dispatcher.utter_message(
            text="Vamos a hacer un ejercicio de respiraci√≥n 4-4-4 para calmar la ansiedad.\n\nInhala profundo contando hasta 4...",
            buttons=[{"title": "Listo, inhal√©", "payload": "/paso_inhalar_listo"}]
        )
        # El siguiente paso se debe manejar con una intent y acci√≥n asociada a /paso_inhalar_listo
        return []

# Acci√≥n para el segundo paso del ejercicio
class ActionEjercicioRespiracionMantener(Action):
    def name(self) -> str:
        return "action_ejercicio_respiracion_mantener"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        dispatcher.utter_message(
            text="¬°Muy bien! Ahora mant√©n la respiraci√≥n contando hasta 4...",
            buttons=[{"title": "Listo, mantuve", "payload": "/paso_mantener_listo"}]
        )
        return []

# Acci√≥n para el tercer paso del ejercicio
class ActionEjercicioRespiracionExhalar(Action):
    def name(self) -> str:
        return "action_ejercicio_respiracion_exhalar"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        dispatcher.utter_message(
            text="¬°Perfecto! Ahora exhala lentamente contando hasta 4...",
            buttons=[{"title": "Listo, exhal√©", "payload": "/paso_exhalar_listo"}]
        )
        return []

# Acci√≥n para finalizar el ejercicio
class ActionEjercicioRespiracionFinal(Action):
    def name(self) -> str:
        return "action_ejercicio_respiracion_final"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        dispatcher.utter_message(
            text="¬°Excelente! Has completado un ciclo de respiraci√≥n 4-4-4. Puedes repetirlo tres veces para sentirte a√∫n mejor. ¬øC√≥mo te sientes ahora? üòä"
        )
        return []




















class ActionGuardarContexto(Action):
    def name(self) -> Text:
        return "action_guardar_contexto"

    def run(self, dispatcher, tracker, domain):
        ultimo_tema = tracker.get_slot("ultimo_tema")
        return [
            SlotSet("ultimo_tema_guardado", ultimo_tema),  # Backup
            SlotSet("tema_interrumpido", True)
        ]

class ActionRecuperarContexto(Action):
    def name(self) -> Text:
        return "action_recuperar_contexto"

    def run(self, dispatcher, tracker, domain):
        ultimo_tema = tracker.get_slot("ultimo_tema_guardado")
        return [
            SlotSet("ultimo_tema", ultimo_tema),
            SlotSet("tema_interrumpido", False)
        ]
        
        

class ActionSolicitarEmocionLibre(Action):
    def name(self) -> str:
        return "action_solicitar_emocion_libre"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict) -> List[Dict]:
        dispatcher.utter_message(text="Claro, cu√©ntame con tus propias palabras c√≥mo te sientes.")
        return []
























class ActionGetTelegramId(Action):

    def name(self) -> str:
        return "action_get_telegram_id"

    
    def run(self, dispatcher, tracker, domain):
        #Obtener el Id de user telegram del tracker
        user_id = tracker.sender_id

        #Enviar id de tl al user
        dispatcher.utter_message(f"Tu ID de user de telegram es: {user_id}")
        
        #Guardar el id en un slot si es necesario
        return [SlotSet("user_telegram_id", user_id)]









# class ActionPreguntarEmocion(Action):
#     def name(self):
#         return "action_preguntar_emocion"

#     def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: dict):
#         buttons = [
#             {"title": "üòä Feliz", "payload": '/expresar_emocion{"emocion": "feliz"}'},
#             {"title": " Triste", "payload": '/expresar_emocion{"emocion": "triste"}'},
#             {"title": "üò£ Ansioso", "payload": '/expresar_emocion{"emocion": "ansioso"}'},
#             {"title": "üò¥ Cansado", "payload": '/expresar_emocion{"emocion": "cansado"}'},
#         ]
       
#         dispatcher.utter_message(text="¬øC√≥mo te sientes hoy?\nSelecciona una de las opciones o escribe como te sientes", buttons=buttons,buttons=buttons, button_type="reply")
#         return []

""" class ActionSimularConversacion(Action):
    def name(self) -> Text:
        return "action_simular_conversacion"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        # Usa el slot 'ultimo_tema' para contextualizar
        tema = tracker.get_slot("ultimo_tema") or "una presentaci√≥n"
        dispatcher.utter_message(f"Vamos a practicar {tema}. Imagina que yo soy un colega. ¬øC√≥mo me saludar√≠as?")
        return []
    

class ActionGuiaRespiracion(Action):  # ¬°Antes dec√≠a "respiracion" sin "a"!
    def name(self) -> Text:
        return "action_guia_respiracion"  # Nombre exacto como en domain.yml

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        dispatcher.utter_message("üíÜ‚Äç‚ôÇÔ∏è Haz esto: Inhala 4 segundos... Aguanta 7... Exhala 8. Repite 3 veces.")
        return []
 """

# class ActionHelloWorld(Action):
#
#     def name(self) -> Text:
#         return "action_hello_world"
#
#     def run(self, dispatcher: CollectingDispatcher,
#             tracker: Tracker,
#             domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
#
#         dispatcher.utter_message(text="Hello World!")
#
#         return []
